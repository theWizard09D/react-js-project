{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Downloads\\\\Cheater react\\\\BookMovieApp\\\\src\\\\screens\\\\home\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport { Link } from \"react-router-dom\";\nimport { Button, CardHeader, Card, CardContent, FormControl, TextField, MenuItem, Checkbox, ImageList, ImageListItem, ImageListItemBar, InputLabel, Input, Select, ListItemText } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useState, useEffect } from 'react';\nimport Header from \"../../common/header/Header\";\nimport './Home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingBottom: 0\n  },\n  title: {\n    fontSize: 14,\n    color: theme.palette.primary.light\n  }\n}));\nexport default function Home({\n  baseUrl\n}) {\n  _s();\n\n  useEffect(() => {\n    fetch(`${baseUrl}movies?page=1&limit=100&status=PUBLISHED`).then(response => response.json()).then(data => setUpcomingMovies(data.movies));\n    fetch(`${baseUrl}movies?page=1&limit=100&status=RELEASED`).then(response => response.json()).then(data => {\n      setReleasedMovies(data.movies);\n      setOrgReleasedMovies(data.movies);\n      const uniqueGeners = setGenersFromMovies(data);\n      setGenres(uniqueGeners);\n      const uniqueArtists = setArtistsFromMovies(data);\n      setArtists(uniqueArtists);\n    });\n  }, []);\n  const classes = useStyles();\n  const [upcomingMovies, setUpcomingMovies] = useState([]);\n  const [releasedMovies, setReleasedMovies] = useState([]);\n  const [orgReleasedMovies, setOrgReleasedMovies] = useState([]);\n  const [genres, setGenres] = useState([{\n    value: \"\",\n    label: \"\"\n  }]);\n  const [selGenres, setSelGenres] = useState([]);\n  const [selArtists, setSelArtists] = useState([]);\n  const [artists, setArtists] = useState([{\n    value: \"\",\n    label: \"\"\n  }]);\n  const [movieName, setMovieName] = useState(\"\");\n  const [releaseStartDate, setReleaseStartDate] = useState(\"\");\n  const [releaseEndDate, setReleaseEndDate] = useState(\"\");\n  /*\n  * setGenersFromMovies takes input from the fetch method from /v1/movies\n  * iterates through movies and collect all the generes and will return genres array\n  */\n\n  const setGenersFromMovies = data => {\n    const genres = [];\n    const uniqueGeners = [];\n    data.movies.forEach(movie => {\n      movie.genres.forEach(genere => {\n        if (!genres.includes(genere)) {\n          genres.push(genere);\n          const gener = {\n            value: genere,\n            label: genere\n          };\n          uniqueGeners.push(gener);\n        }\n      });\n    });\n    return uniqueGeners;\n  };\n  /*\n  * setArtistsFromMovies takes input from the fetch method from /v1/movies\n  * iterates through movies and collect all the artits and will return artits array\n  */\n\n\n  const setArtistsFromMovies = data => {\n    const artists = [];\n    const uniqueArtists = [];\n    data.movies.forEach(movie => {\n      movie.artists.forEach(artist => {\n        if (!artists.includes(artist.id)) {\n          artists.push(artist.id);\n          const artst = {\n            value: artist.id,\n            label: `${artist.first_name} ${artist.last_name}`\n          };\n          uniqueArtists.push(artst);\n        }\n      });\n    });\n    return uniqueArtists;\n  };\n  /*\n  * applyFilterButtonHandler is used to filter movies based on the user selection\n  */\n\n\n  const applyFilterButtonHandler = () => {\n    const filteredMovies = orgReleasedMovies.reduce(function (filtered, movie) {\n      const movies = [];\n\n      if (movie.title === movieName) {\n        movies.push(movie.id);\n        filtered.push(movie);\n      }\n\n      movie.genres.forEach(genre => {\n        if (!movies.includes(movie.id) && selGenres.includes(genre)) {\n          movies.push(movie.id);\n          filtered.push(movie);\n        }\n      });\n      movie.artists.forEach(artist => {\n        if (!movies.includes(movie.id) && selArtists.includes(artist.first_name + \" \" + artist.last_name)) {\n          movies.push(movie.id);\n          filtered.push(movie);\n        }\n      });\n\n      if (!movies.includes(movie.id) && Date.parse(movie.release_date) >= Date.parse(releaseStartDate) && Date.parse(movie.release_date) <= Date.parse(releaseEndDate ? releaseEndDate : new Date())) {\n        movies.push(movie.id);\n        filtered.push(movie);\n      }\n\n      return filtered;\n    }, []);\n    setReleasedMovies([...filteredMovies]);\n  };\n  /*\n  * handleGenresOnChange is used to set the state of the genres on change\n  */\n\n\n  const handleGenresOnChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setSelGenres(typeof value === 'string' ? value.split(',') : value);\n  };\n  /*\n  * handleArtistsChange is used to set the state of the artists on change\n  */\n\n\n  const handleArtistsChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setSelArtists(typeof value === 'string' ? value.split(',') : value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      baseUrl: baseUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"upcomingMovies\",\n      children: \"Upcoming Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upcomingMovies\",\n      children: /*#__PURE__*/_jsxDEV(ImageList, {\n        rowHeight: 250,\n        cols: 6,\n        children: upcomingMovies.map(upcomingMovie => /*#__PURE__*/_jsxDEV(ImageListItem, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"\",\n            src: upcomingMovie.poster_url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ImageListItemBar, {\n            title: upcomingMovie.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this)]\n        }, upcomingMovie.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"releasedMovies\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"releasedMovies\",\n        children: /*#__PURE__*/_jsxDEV(ImageList, {\n          rowHeight: 350,\n          cols: 4,\n          gap: 16,\n          children: releasedMovies.map(releasedMovie => /*#__PURE__*/_jsxDEV(ImageListItem, {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: `/movie/${releasedMovie.id}`,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                alt: \"\",\n                src: releasedMovie.poster_url\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 73\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(ImageListItemBar, {\n              title: releasedMovie.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 33\n            }, this)]\n          }, releasedMovie.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"releasedMoviesSearch\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            title: \"FIND MOVIES BY:\",\n            classes: {\n              title: classes.title,\n              root: classes.root\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              className: \"formControl\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"movieName\",\n                children: \"Movie Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                id: \"movieName\",\n                value: movieName,\n                onChange: e => setMovieName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: \"formControl mtop10\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"genres\",\n                children: \"Genres\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                variant: \"standard\",\n                labelId: \"demo-multiple-checkbox-label\",\n                id: \"demo-multiple-checkbox\",\n                multiple: true,\n                value: selGenres,\n                onChange: handleGenresOnChange,\n                renderValue: selected => selected.join(', '),\n                children: genres.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: option.value,\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: selGenres.indexOf(option.value) > -1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: option.value\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 227,\n                    columnNumber: 45\n                  }, this)]\n                }, option.value, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: \"formControl mtop10\",\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"artists\",\n                children: \"Artists\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                variant: \"standard\",\n                id: \"demo-multiple-checkbox\",\n                multiple: true,\n                value: selArtists,\n                onChange: handleArtistsChange,\n                renderValue: selected => selected.join(', '),\n                children: artists.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: option.label,\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    checked: selArtists.indexOf(option.label) > -1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    primary: option.label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 45\n                  }, this)]\n                }, option.label, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: \"formControl mtop10\",\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"standard\",\n                label: \"Release Date Start\",\n                type: \"date\",\n                InputLabelProps: {\n                  shrink: true\n                },\n                value: releaseStartDate,\n                onInput: e => setReleaseStartDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              className: \"formControl mtop10\",\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"standard\",\n                label: \"Release Date End\",\n                type: \"date\",\n                InputLabelProps: {\n                  shrink: true\n                },\n                value: releaseEndDate,\n                onInput: e => setReleaseEndDate(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alignCenter mtop10\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                color: \"primary\",\n                fullWidth: true,\n                onClick: applyFilterButtonHandler,\n                children: \"APPLY\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"5jHrEy6jAikoKQ1zJuWS1+n5s6U=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/DELL/Downloads/Cheater react/BookMovieApp/src/screens/home/Home.js"],"names":["Link","Button","CardHeader","Card","CardContent","FormControl","TextField","MenuItem","Checkbox","ImageList","ImageListItem","ImageListItemBar","InputLabel","Input","Select","ListItemText","makeStyles","React","useState","useEffect","Header","useStyles","theme","root","paddingBottom","title","fontSize","color","palette","primary","light","Home","baseUrl","fetch","then","response","json","data","setUpcomingMovies","movies","setReleasedMovies","setOrgReleasedMovies","uniqueGeners","setGenersFromMovies","setGenres","uniqueArtists","setArtistsFromMovies","setArtists","classes","upcomingMovies","releasedMovies","orgReleasedMovies","genres","value","label","selGenres","setSelGenres","selArtists","setSelArtists","artists","movieName","setMovieName","releaseStartDate","setReleaseStartDate","releaseEndDate","setReleaseEndDate","forEach","movie","genere","includes","push","gener","artist","id","artst","first_name","last_name","applyFilterButtonHandler","filteredMovies","reduce","filtered","genre","Date","parse","release_date","handleGenresOnChange","event","target","split","handleArtistsChange","map","upcomingMovie","poster_url","releasedMovie","e","selected","join","option","indexOf","shrink"],"mappings":"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","sourcesContent":["import { Link } from \"react-router-dom\";\nimport { Button, CardHeader, Card, CardContent, FormControl, TextField, MenuItem, Checkbox, ImageList, ImageListItem, ImageListItemBar, InputLabel, Input, Select, ListItemText } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useState, useEffect } from 'react';\nimport Header from \"../../common/header/Header\";\nimport './Home.css';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root:{\n        paddingBottom:0\n    },\n    title: {\n        fontSize: 14,\n        color: theme.palette.primary.light,\n    }\n}));\n\nexport default function Home({ baseUrl }) {\n\n    useEffect(() => {\n\n        fetch(`${baseUrl}movies?page=1&limit=100&status=PUBLISHED`)\n            .then(response => response.json())\n            .then(data => setUpcomingMovies(data.movies));\n\n        fetch(`${baseUrl}movies?page=1&limit=100&status=RELEASED`)\n            .then(response => response.json())\n            .then(data => {\n                setReleasedMovies(data.movies);\n                setOrgReleasedMovies(data.movies);\n                const uniqueGeners = setGenersFromMovies(data);\n                setGenres(uniqueGeners);\n                const uniqueArtists = setArtistsFromMovies(data);\n                setArtists(uniqueArtists);\n\n            }\n            );\n\n    }, []);\n\n    const classes = useStyles();\n    const [upcomingMovies, setUpcomingMovies] = useState([]);\n    const [releasedMovies, setReleasedMovies] = useState([]);\n    const [orgReleasedMovies, setOrgReleasedMovies] = useState([]);\n    const [genres, setGenres] = useState([{ value: \"\", label: \"\" }]);\n    const [selGenres, setSelGenres] = useState([]);\n    const [selArtists, setSelArtists] = useState([]);\n    const [artists, setArtists] = useState([{ value: \"\", label: \"\" }]);\n    const [movieName, setMovieName] = useState(\"\");\n    const [releaseStartDate, setReleaseStartDate] = useState(\"\");\n    const [releaseEndDate, setReleaseEndDate] = useState(\"\");\n\n    /*\n    * setGenersFromMovies takes input from the fetch method from /v1/movies\n    * iterates through movies and collect all the generes and will return genres array\n    */\n    const setGenersFromMovies = (data) => {\n        const genres = [];\n        const uniqueGeners = [];\n        data.movies.forEach(movie => {\n            movie.genres.forEach(genere => {\n                if (!genres.includes(genere)) {\n                    genres.push(genere);\n                    const gener = { value: genere, label: genere };\n                    uniqueGeners.push(gener);\n                }\n            });\n        });\n        return uniqueGeners;\n    }\n\n    /*\n    * setArtistsFromMovies takes input from the fetch method from /v1/movies\n    * iterates through movies and collect all the artits and will return artits array\n    */\n    const setArtistsFromMovies = (data) => {\n        const artists = [];\n        const uniqueArtists = [];\n        data.movies.forEach(movie => {\n            movie.artists.forEach(artist => {\n                if (!artists.includes(artist.id)) {\n                    artists.push(artist.id);\n                    const artst = { value: artist.id, label: `${artist.first_name} ${artist.last_name}` };\n                    uniqueArtists.push(artst);\n                }\n            });\n        });\n        return uniqueArtists;\n    }\n\n    /*\n    * applyFilterButtonHandler is used to filter movies based on the user selection\n    */\n    const applyFilterButtonHandler = () => {\n\n        const filteredMovies = orgReleasedMovies.reduce(function (filtered, movie) {\n            const movies = [];\n            if (movie.title === movieName) {\n                movies.push(movie.id);\n                filtered.push(movie);\n            }\n            movie.genres.forEach(genre => {\n                if (!movies.includes(movie.id) && selGenres.includes(genre)) {\n                    movies.push(movie.id);\n                    filtered.push(movie);\n                }\n            })\n            movie.artists.forEach(artist => {\n                if (!movies.includes(movie.id) && selArtists.includes(artist.first_name + \" \" + artist.last_name)) {\n                    movies.push(movie.id);\n                    filtered.push(movie);\n                }\n            })\n\n            if (!movies.includes(movie.id)\n                && Date.parse(movie.release_date) >= Date.parse(releaseStartDate)\n                && Date.parse(movie.release_date) <= Date.parse(releaseEndDate ? releaseEndDate : new Date())\n            ) {\n                movies.push(movie.id);\n                filtered.push(movie);\n            }\n\n            return filtered;\n        }, []);\n        setReleasedMovies([...filteredMovies]);\n    }\n\n    /*\n    * handleGenresOnChange is used to set the state of the genres on change\n    */\n    const handleGenresOnChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setSelGenres(\n            typeof value === 'string' ? value.split(',') : value\n        );\n\n    };\n\n    /*\n    * handleArtistsChange is used to set the state of the artists on change\n    */\n    const handleArtistsChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setSelArtists(\n            typeof value === 'string' ? value.split(',') : value\n        );\n    }\n\n    return (\n        <div>\n            <Header baseUrl={baseUrl} />\n            <div id=\"upcomingMovies\">Upcoming Movies</div>\n\n            <div className=\"upcomingMovies\" >\n                <ImageList rowHeight={250} cols={6} >\n                    {upcomingMovies.map(upcomingMovie => (\n                        <ImageListItem key={upcomingMovie.id}>\n                            <img alt=\"\" src={upcomingMovie.poster_url} />\n                            <ImageListItemBar\n                                title={upcomingMovie.title}\n                            />\n                        </ImageListItem>\n                    ))}\n                </ImageList>\n            </div>\n            <div id=\"releasedMovies\">\n                <div className=\"releasedMovies\">\n                    <ImageList rowHeight={350} cols={4} gap={16} >\n                        {releasedMovies.map(releasedMovie => (\n\n                            <ImageListItem key={releasedMovie.id}>\n\n                                <Link to={`/movie/${releasedMovie.id}`}><img alt=\"\" src={releasedMovie.poster_url} /></Link>\n\n                                <ImageListItemBar\n                                    title={releasedMovie.title}\n                                />\n\n                            </ImageListItem>\n\n                        ))}\n                    </ImageList>\n                </div>\n                <div className=\"releasedMoviesSearch\">\n                    <Card >\n                        <CardHeader title=\"FIND MOVIES BY:\" classes={{\n                            title: classes.title,\n                            root: classes.root \n                        }} />\n                        \n                        <CardContent >\n\n                            <FormControl className=\"formControl\">\n                                <InputLabel htmlFor=\"movieName\">\n                                    Movie Name\n                                </InputLabel>\n                                <Input\n                                    id=\"movieName\"\n                                    value={movieName}\n                                    onChange={(e) => setMovieName(e.target.value)}\n                                />\n                            </FormControl>\n\n                            <FormControl className=\"formControl mtop10\">\n                                <InputLabel htmlFor=\"genres\">\n                                    Genres\n                                </InputLabel>\n                                <Select\n                                    variant=\"standard\"\n                                    labelId=\"demo-multiple-checkbox-label\"\n                                    id=\"demo-multiple-checkbox\"\n                                    multiple\n                                    value={selGenres}\n                                    onChange={handleGenresOnChange}\n                                    renderValue={(selected) => selected.join(', ')}\n\n                                >\n                                    {genres.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            <Checkbox checked={selGenres.indexOf(option.value) > -1} />\n                                            <ListItemText primary={option.value} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n\n                            <FormControl className=\"formControl mtop10\">\n                                <InputLabel htmlFor=\"artists\">\n                                    Artists\n                                </InputLabel>\n                                <Select\n                                    variant=\"standard\"\n\n                                    id=\"demo-multiple-checkbox\"\n                                    multiple\n                                    value={selArtists}\n                                    onChange={handleArtistsChange}\n                                    renderValue={(selected) => selected.join(', ')}\n\n                                >\n                                    {artists.map((option) => (\n                                        <MenuItem key={option.label} value={option.label}>\n                                            <Checkbox checked={selArtists.indexOf(option.label) > -1} />\n                                            <ListItemText primary={option.label} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n                            <FormControl className=\"formControl mtop10\">\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"Release Date Start\"\n                                    type=\"date\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    value={releaseStartDate}\n                                    onInput={(e) => setReleaseStartDate(e.target.value)}\n                                />\n                            </FormControl>\n                            <FormControl className=\"formControl mtop10\">\n                                <TextField\n                                    variant=\"standard\"\n                                    label=\"Release Date End\"\n                                    type=\"date\"\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                    value={releaseEndDate}\n                                    onInput={(e) => setReleaseEndDate(e.target.value)}\n                                />\n                            </FormControl>\n                            <div className=\"alignCenter mtop10\">\n                                <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth onClick={applyFilterButtonHandler}>APPLY</Button>\n                            </div>\n                        </CardContent>\n\n                    </Card>\n                </div>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}